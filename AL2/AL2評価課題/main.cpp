#include <Novice.h>

const char kWindowTitle[] = "青い矩形";

// Windowsアプリでのエントリーポイント(main関数)
int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, int) {

	// ライブラリの初期化
	Novice::Initialize(kWindowTitle, 800, 800);

	//　変数宣言
	int size_map_x = 32; //マップチップXサイズ
	int size_map_y = 32; //マップチップYサイズ

	int num_map_y = 25; //28*25
	int num_map_x = 50; //28*50

	int map[25][50]{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,1,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
	1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
	1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
	1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,
	1,0,0,0,1,1,1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
	};

	//　プレイヤーの情報
	float playerPosX = 32.0f;
	float playerPosY = 32.0f;
	float playerRadius = 16.0f;
	float playerSpeed = 32.0f;

	// 壁がある方向に動けなくする変数
	float oldPlayerPosX = 0.0f;
	float oldPlayerPosY = 0.0f;

	// プレイヤーの座標を割り出す変数
	float tempPlayerPosX = 0.0f;
	float tempPlayerPosY = 0.0f;

	//　シーン切り替え
	enum SCENE {
		title=0,
		play,
	};

	int sceneNum = title;

	// リソース画像
	int titleGH = Novice::LoadTexture("./title.png");

	// キー入力結果を受け取る箱
	char keys[256] = {0};
	char preKeys[256] = {0};

	// ウィンドウの×ボタンが押されるまでループ
	while (Novice::ProcessMessage() == 0) {
		// フレームの開始
		Novice::BeginFrame();

		// キー入力を受け取る
		memcpy(preKeys, keys, 256);
		Novice::GetHitKeyStateAll(keys);

		///
		/// ↓更新処理ここから
		///

		oldPlayerPosX = playerPosX;
		oldPlayerPosY = playerPosY;

		switch (sceneNum) {

		case title:

			if (keys[DIK_SPACE] && preKeys[DIK_SPACE] == false) {

				sceneNum = play;

			}

			break;

		case play:

			if(keys[DIK_SPACE]&&preKeys[DIK_SPACE]==false)

			// プレイヤーの仮座標
			oldPlayerPosX = playerPosX;
			oldPlayerPosY = playerPosY;

			// プレイヤーの移動処理

			// 上方向への移動
			if (keys[DIK_W] && preKeys[DIK_W] == false) {

				playerPosY -= playerSpeed;

			}

			// 下方向への移動
			if (keys[DIK_S] && preKeys[DIK_S] == false) {

				playerPosY += playerSpeed;

			}

			// 左方向への移動
			if (keys[DIK_A] && preKeys[DIK_A] == false) {

				playerPosX -= playerSpeed;

			}

			// 右方向への移動
			if (keys[DIK_D] && preKeys[DIK_D] == false) {

				playerPosX += playerSpeed;

			}

			// プレイヤーの現在の座標を割り出す
			tempPlayerPosX = playerPosX / size_map_x;
			tempPlayerPosY = playerPosY / size_map_y;

			// プレイヤーと壁の当たり判定
			if (map[(int)tempPlayerPosY][(int)tempPlayerPosX] == 1) {

				playerPosX = oldPlayerPosX;

				playerPosY = oldPlayerPosY;

			}

			if (keys[DIK_SPACE] && preKeys[DIK_SPACE] == false) {

				sceneNum = title;

			}

			break;

		}

		///
		/// ↑更新処理ここまで
		///

		///
		/// ↓描画処理ここから
		///

		switch (sceneNum) {

		case title:

			Novice::DrawSprite(0, 0, titleGH, 1.0f, 1.0f, 0.0f, WHITE);

			break;

		case play:

			// 背景の描画
			Novice::DrawBox(0, 0, 800, 800, 0.0f, 0x000000FF, kFillModeSolid);

			// マップの描画
			for (int y = 0; y < num_map_y; y++) {

				for (int x = 0; x < num_map_x; x++) {

					if (map[y][x] == 1) {

						Novice::DrawBox(x * size_map_y, y * size_map_x, size_map_y, size_map_x, 0.0f, 0xFFFFFFFF, kFillModeSolid);

					}
				}
			}

			// プレイヤーの描画
			Novice::DrawBox((int)playerPosX, (int)playerPosY, (int)playerRadius * 2, (int)playerRadius * 2, 0.0f, BLUE, kFillModeSolid);

			break;

		}

		

		///
		/// ↑描画処理ここまで
		///

		// フレームの終了
		Novice::EndFrame();

		// ESCキーが押されたらループを抜ける
		if (preKeys[DIK_ESCAPE] == 0 && keys[DIK_ESCAPE] != 0) {
			break;
		}
	}

	// ライブラリの終了
	Novice::Finalize();
	return 0;
}
